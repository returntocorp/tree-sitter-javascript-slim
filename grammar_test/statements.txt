============================================
If statements
============================================

if (x)
  log(y);

if (a.b) {
  log(c);
  log(d);
}

----

(program
  (if_statement (identifier)
    (expression_statement (function_call
      (identifier) (identifier))))
  (if_statement (member_access (identifier) (identifier))
    (statement_block
      (expression_statement (function_call
        (identifier) (identifier)))
      (expression_statement (function_call
        (identifier) (identifier))))))

============================================
If-else statements
============================================

if (x)
  y();
else if (a)
  b();

if (a) {
  c();
  d();
} else {
  e();
}

----

(program
  (if_statement (identifier)
    (expression_statement (function_call (identifier)))
    (if_statement (identifier)
      (expression_statement (function_call (identifier)))))
  (if_statement (identifier)
    (statement_block
      (expression_statement (function_call (identifier)))
      (expression_statement (function_call (identifier))))
    (statement_block
      (expression_statement (function_call (identifier))))))

============================================
For statements
============================================

for (var a, b; c; d)
  log(e);

for (i = 0, init(); i < 10; i++)
  log(y);

for (;;) {
  log(y);
}

---

(program
  (for_statement
    (var_declaration (identifier) (identifier))
    (identifier)
    (identifier)
    (expression_statement (function_call (identifier) (identifier))))

  (for_statement
    (expressions
      (assignment (identifier) (number))
      (function_call (identifier)))
    (rel_op (identifier) (number))
    (math_op (identifier))
    (expression_statement (function_call (identifier) (identifier))))

  (for_statement
    (statement_block
      (expression_statement (function_call (identifier) (identifier))))))

============================================
For-in statements
============================================

for (var item in items)
  log(item);

for (item in items)
  log(item);

---

(program
  (for_in_statement (identifier) (identifier)
    (expression_statement (function_call (identifier) (identifier))))
  (for_in_statement (identifier) (identifier)
    (expression_statement (function_call (identifier) (identifier)))))

============================================
While statements
============================================

while (a)
  b();

---

(while_statement (identifier)
  (expression_statement (function_call (identifier))))

============================================
Do statements
============================================

do {
  a;
} while (b)

---

(do_statement
  (statement_block (expression_statement (identifier)))
  (identifier))

============================================
Return statements
============================================

return;
return 5;

---

(program
  (return_statement)
  (return_statement (number)))

============================================
Var declarations
============================================

var x = 1;
var x, y = {}, z;

---

(program
  (var_declaration
    (var_assignment (identifier) (number)))
  (var_declaration
    (identifier)
    (var_assignment (identifier) (object))
    (identifier)))

============================================
Comments
============================================

{

  // This is a property
  aProperty: 1,


  /*
   * This is a method
   */
  aMethod: function() {}
};

---

(expression_statement (object
  (comment)
  (pair (identifier) (number))
  (comment)
  (pair (identifier) (function (statement_block)))))

============================================
Automatic semicolon insertion
============================================

if (a) {
  var b = c
  d()
  e()
  return f
}

---

(if_statement (identifier) (statement_block
  (var_declaration (var_assignment (identifier) (identifier)))
  (expression_statement (function_call (identifier)))
  (expression_statement (function_call (identifier)))
  (return_statement (identifier))))

============================================
Switch statements
============================================

switch (x) {
  case 1:
  case 2:
    something();
    break;
  case "three":
    somethingElse();
    break;
  default:
    return 4;
}

---

(switch_statement (identifier)
  (case (number))
  (case (number)
    (expression_statement (function_call (identifier)))
    (break_statement))
  (case (string)
    (expression_statement (function_call (identifier)))
    (break_statement))
  (default
    (return_statement (number))))

============================================
Throw statements
============================================

throw new Error("uh oh");

---

(throw_statement
  (new_expression (function_call (identifier) (string))))

============================================
Try catch finally statements
============================================

try { a; } catch (b) { c; }
try { d; } finally { e; }
try { f; } catch { g; } finally { h; }

---

(program
  (try_statement
    (statement_block (expression_statement (identifier)))
    (catch (identifier)
      (statement_block (expression_statement (identifier)))))
  (try_statement
    (statement_block (expression_statement (identifier)))
    (finally
      (statement_block (expression_statement (identifier)))))
  (try_statement
    (statement_block (expression_statement (identifier)))
    (catch
      (statement_block (expression_statement (identifier))))
    (finally
      (statement_block (expression_statement (identifier))))))

============================================
Delete statements
============================================

delete thing.prop;
delete thing['prop'];

---

(program
  (delete_statement (member_access (identifier) (identifier)))
  (delete_statement (subscript_access (identifier) (string))))
