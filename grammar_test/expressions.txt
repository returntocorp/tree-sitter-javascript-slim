============================================
Strings
============================================

"A string with \"double\" and 'single' quotes";
'A string with "double" and \'single\' quotes';
'\\'
"\\"

----

(program
  (expression_statement (string))
  (expression_statement (string))
  (expression_statement (string))
  (expression_statement (string)))

============================================
Numbers
============================================

101;
3.14;
0x1ABCDEFabcdef;

---

(program
  (expression_statement (number))
  (expression_statement (number))
  (expression_statement (number)))

============================================
Variables
============================================

theVar;
theVar2;
$_;

---

(program
  (expression_statement (identifier))
  (expression_statement (identifier))
  (expression_statement (identifier)))

============================================
Booleans
============================================

null;
undefined;
true;
false;

---

(program
  (expression_statement (null))
  (expression_statement (undefined))
  (expression_statement (true))
  (expression_statement (false)))

============================================
Regexps
============================================

/one\\/;
/one/g;
/one/i;
/one/gi;

---

(program
  (expression_statement (regex))
  (expression_statement (regex))
  (expression_statement (regex))
  (expression_statement (regex)))

============================================
Objects
============================================

{};
{ key1: "value1" };
{ key1: "value1", "key2": value2, key3: 3.0 };

---

(program
  (expression_statement (object))
  (expression_statement (object
    (pair (identifier) (string))))
  (expression_statement (object
    (pair (identifier) (string))
    (pair (string) (identifier))
    (pair (identifier) (number)))))

============================================
Arrays
============================================

[];
[ "item1" ];
[ "item1", item2 ];

---

(program
  (expression_statement (array))
  (expression_statement (array (string)))
  (expression_statement (array (string) (identifier))))

============================================
Functions
============================================

function() {};
function(arg1, arg2) {
  arg2;
};
function stuff() {}

---

(program
  (expression_statement (function (statement_block)))
  (expression_statement (function
    (formal_parameters (identifier) (identifier))
    (statement_block
      (expression_statement (identifier)))))
  (expression_statement (function
    (identifier)
    (statement_block))))

============================================
Property access
============================================

x.someProperty;
x[someVariable];
x["some-string"];

---

(program
  (expression_statement (member_access (identifier) (identifier)))
  (expression_statement (subscript_access (identifier) (identifier)))
  (expression_statement (subscript_access (identifier) (string))))

============================================
Function calls
============================================

x.someMethod(arg1, "arg2");
function(x, y) {

}(a, b);

---

(program
  (expression_statement (function_call
    (member_access (identifier) (identifier))
    (arguments (identifier) (string))))
  (expression_statement (function_call
    (function
      (formal_parameters (identifier) (identifier))
      (statement_block))
    (arguments (identifier) (identifier)))))

============================================
Constructor calls
============================================

new module.Klass(1, "two");
new Thing;

---

(program
  (expression_statement (new_expression (function_call
    (member_access (identifier) (identifier))
    (arguments (number) (string)))))
  (expression_statement (new_expression
    (identifier))))

============================================
Math operators
============================================

i++;
i--;
i + j;
i - j;
+x;
-x;

---

(program
  (expression_statement (math_op (identifier)))
  (expression_statement (math_op (identifier)))
  (expression_statement (math_op (identifier) (identifier)))
  (expression_statement (math_op (identifier) (identifier)))
  (expression_statement (math_op (identifier)))
  (expression_statement (math_op (identifier))))

============================================
Boolean operators
============================================

i || j;
i && j;
!a && !b || !c && !d;

---

(program
  (expression_statement (bool_op (identifier) (identifier)))
  (expression_statement (bool_op (identifier) (identifier)))
  (expression_statement (bool_op
    (bool_op
      (bool_op (identifier))
      (bool_op (identifier)))
    (bool_op
      (bool_op (identifier))
      (bool_op (identifier))))))

============================================
Bitwise operators
============================================

i >> j;
i << j;
i & j;
i | j;

---

(program
  (expression_statement (bitwise_op (identifier) (identifier)))
  (expression_statement (bitwise_op (identifier) (identifier)))
  (expression_statement (bitwise_op (identifier) (identifier)))
  (expression_statement (bitwise_op (identifier) (identifier))))

============================================
Relational operators
============================================

x < y;
x <= y;
x == y;
x === y;
x != y;
x !== y;
x >= y;
x > y;

---

(program
  (expression_statement (rel_op (identifier) (identifier)))
  (expression_statement (rel_op (identifier) (identifier)))
  (expression_statement (rel_op (identifier) (identifier)))
  (expression_statement (rel_op (identifier) (identifier)))
  (expression_statement (rel_op (identifier) (identifier)))
  (expression_statement (rel_op (identifier) (identifier)))
  (expression_statement (rel_op (identifier) (identifier)))
  (expression_statement (rel_op (identifier) (identifier))))

==============================================
Assignments
==============================================

x = 0;
x.y = 0;
x["y"] = 0;

---

(program
  (expression_statement (assignment
    (identifier)
    (number)))
  (expression_statement (assignment
    (member_access (identifier) (identifier))
    (number)))
  (expression_statement (assignment
    (subscript_access (identifier) (string))
    (number))))

==============================================
Ternaries
==============================================

condition ? case1 : case2;

x.y = some.condition ?
  some.case :
  some.other.case;
---

(program
  (expression_statement (ternary
    (identifier) (identifier) (identifier)))
  (expression_statement (assignment
    (member_access (identifier) (identifier))
    (ternary
      (member_access (identifier) (identifier))
      (member_access (identifier) (identifier))
      (member_access (member_access (identifier) (identifier)) (identifier))))))

==============================================
Type operators
==============================================

typeof x;
x instanceof String;

---

(program
  (expression_statement (type_op (identifier)))
  (expression_statement (type_op (identifier) (identifier))))

==============================================
Comma operator
==============================================

f, g;

---

(program
  (expression_statement (identifier) (identifier)))

==============================================
Math assignment operators
==============================================

x += 1;
y.z *= 3;

---

(program
  (expression_statement
    (math_assignment (identifier) (number)))
  (expression_statement
    (math_assignment (member_access (identifier) (identifier)) (number))))

==============================================
Operator precedence
==============================================

a <= b && c >= d;
a.b = c ? d : e;
a && b(c) && d;
a && new b(c) && d;
typeof a == b && c instanceof d

---

(program
  (expression_statement (bool_op
    (rel_op (identifier) (identifier))
    (rel_op (identifier) (identifier))))
  (expression_statement (assignment
    (member_access (identifier) (identifier))
    (ternary (identifier) (identifier) (identifier))))
  (expression_statement (bool_op
    (bool_op
      (identifier)
      (function_call (identifier) (arguments (identifier))))
    (identifier)))
  (expression_statement (bool_op
    (bool_op
      (identifier)
      (new_expression (function_call (identifier) (arguments (identifier)))))
    (identifier)))
  (expression_statement (bool_op
    (rel_op
      (type_op (identifier))
      (identifier))
    (type_op (identifier) (identifier)))))
